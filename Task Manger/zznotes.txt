mongoose is used to connect the mongoDB with the code 
how to connect
we have to setup a enviroment variable which have url of database (.env file)
ek connect.js ki file bnake usme mongoose import kia frr ek connectdb ka function bnake return krdia
frr app.js me connect ko import krke async function bnake usme
try catch lgake connectdb function me .env se url leke pass krdia frr jaise hi connect ho toh server.listen ko run krado


schema
Everything in Mongoose starts with a Schema. Each schema maps to a MongoDB collection and defines the shape of the documents within that collection

schema ek trh se jo data hum mongoDB pe bhejte hai uska format kya hoga jo json data hai uski kya keys hongi or frr un keys ko declare krna ki kya type hogi values ki or bhi bakki properties

models and schema
A Mongoose model is a wrapper on the Mongoose schema. A Mongoose schema defines the structure of the document, default values, validators, etc., whereas a Mongoose model provides an interface to the database for creating, querying, updating, deleting records, etc.


we can and validation direct to schema by making object
  <<<required:[true,'must provide name'],
  trim:true,
  maxlength:[20,'name can not be more than 20 characters']>>> Like these


mongoDB functions
.create => add a model to the database
.find => use to return the the data from database 
        we have to pass filter<{}> yeh ese brac me as parameter to find a specific data agr empty brackets hai toh sara data return hojega
        nhi toh object me daldo jo find krna haii example <Product.find({ name: 'vase table'});>

.findOne => koi bhi ek element dhundne ke liye
.findOneAndDelete => dhund ke delete krna
.findOneAndUpdate => dhund ke update krnaa
product.deleteMany() => remove all the data


put vs patch
main use : 
        both are use to update the data 
diff :
        in put whole data have to modify i.e. we have to pass all the parameter in object with same or new value BUT
   BUT  in patch we can update a single property or value of object not need to modify entire data

(req,res,next)=>{}
next => Callback argument to the middleware function, called "next" by convention.
res => HTTP response argument to the middleware function, called "res" by convention.
req => HTTP request argument to the middleware function, called "req" by convention.